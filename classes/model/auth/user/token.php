<?php defined('SYSPATH') or die ('No direct script access.');
/**
 * Sprig Auth User Token Model
 * @package Sprig Auth
 * @author	Paul Banks
 */
class Model_Auth_User_Token extends Sprig
{
	protected function _init()
	{
		$this->_fields += array(
			'id' => new Sprig_Field_Auto,
			'token' => new Sprig_Field_Char(array(
				// Tokens are autogenerated so no need to double check 'unique'
				'empty' => FALSE,
				'max_length' => 32
			)),
			'user' => new Sprig_Field_BelongsTo(array(
				'model' => 'User',	
			)),
			'user_agent' => new Sprig_Field_Char(array(
				'empty' => FALSE,
			)),
			'created' => new Sprig_Field_Timestamp(array(
				'auto_now_create' => TRUE,
			)),
			'expires' => new Sprig_Field_Timestamp,
		);
		
		if (mt_rand(1, 100) === 1)
		{
			// Do garbage collection
			$this->delete_expired();
		}
	}
	
	/**
	 * Ensure expired tokens are never loaded
	 * Actual deletion is handled with delete_expired() ran with _init()
	 * @param Database_Query_Builder_Select $query [optional]
	 * @param int                    	    $limit [optional]
	 * @return Sprig
	 */
	public function load(Database_Query_Builder_Select $query = NULL, $limit = 1)
	{
		$query = (isset($query)) ? $query : DB::select();
		$query->where('expires', '>', time());
		return parent::load($query, $limit);
	}
	
	public function create()
	{
		// Set hash of the user agent
		$this->user_agent = sha1(Request::$user_agent);

		// Create a new token each time the token is saved
		$this->token = $this->create_token();
		
		return parent::create();
	}
	
	public function update()
	{
		// Create a new token each time the token is saved
		$this->token = $this->create_token();
		
		return parent::update();
	}
	
	/**
	 * Deletes all expired tokens.
	 *
	 * @return  void
	 */
	public function delete_expired()
	{
		// Make sure the table is defined.....
		if ( ! $this->_table)
		{
			// Set the table name to the plural model name
			$this->_table = inflector::plural(strtolower(substr(get_class($this), 6)));
		}
		// Delete all expired tokens
		DB::delete($this->_table)
			->where('expires', '<', time())
			->execute($this->_db);

		return $this;
	}
	
	/**
	 * Finds a new unique token, using a loop to make sure that the token does
	 * not already exist in the database. This could potentially become an
	 * infinite loop, but the chances of that happening are very unlikely.
	 *
	 * @return  string
	 */
	public function create_token()
	{
		while (TRUE)
		{
			// Create a random token
			$token = substr(base64_encode(sha1(uniqid($this->_table.mt_srand()))), 0, 32);

			// Make sure the token does not already exist
			$count = DB::select(DB::expr('COUNT(*) AS total'))
				->from($this->_table)
				->where('token', '=', $token)
				->execute($this->_db)
				->get('total');
			
			if ($count == 0)
			{
				// A unique token has been found
				return $token;
			}
		}
	}
} // End Model_Auth_User_Token